#!/usr/bin/env python3
"""
Script de prueba para verificar las correcciones SSL en la eliminaci√≥n de libros
"""

import os
import sys
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_ssl_delete_fix():
    """Prueba la correcci√≥n SSL para eliminaci√≥n de libros"""
    try:
        from google_drive_manager import get_drive_manager
        
        logger.info("üîß Inicializando Google Drive Manager...")
        drive_manager = get_drive_manager()
        
        if not drive_manager.service:
            logger.error("‚ùå No se pudo inicializar el servicio de Google Drive")
            return False
        
        logger.info("‚úÖ Servicio de Google Drive inicializado correctamente")
        
        # Probar una operaci√≥n de listado para verificar conexi√≥n
        logger.info("üîç Probando operaci√≥n de listado...")
        try:
            results = drive_manager.service.files().list(
                pageSize=1, 
                fields="files(id,name)"
            ).execute()
            
            logger.info("‚úÖ Operaci√≥n de listado exitosa")
            
        except Exception as e:
            logger.error(f"‚ùå Error en operaci√≥n de listado: {e}")
            return False
        
        # Probar eliminaci√≥n de un archivo inexistente (esto deber√≠a fallar pero sin error SSL)
        logger.info("üóëÔ∏è Probando manejo SSL en eliminaci√≥n...")
        try:
            # Intentar eliminar un archivo que no existe (esto deber√≠a fallar pero sin error SSL)
            result = drive_manager.delete_book_from_drive("archivo_inexistente_12345")
            
            if result['success']:
                logger.warning("‚ö†Ô∏è Eliminaci√≥n exitosa de archivo inexistente (comportamiento inesperado)")
            else:
                logger.info("‚úÖ Manejo correcto de eliminaci√≥n de archivo inexistente")
                logger.info(f"   Error esperado: {result['error']}")
            
            logger.info("‚úÖ Prueba de eliminaci√≥n completada sin errores SSL")
            return True
            
        except Exception as e:
            error_msg = str(e)
            if "WRONG_VERSION_NUMBER" in error_msg or "SSL" in error_msg.upper():
                logger.error(f"‚ùå Error SSL persistente en eliminaci√≥n: {e}")
                return False
            else:
                logger.info(f"‚úÖ Error no-SSL manejado correctamente: {e}")
                return True
            
    except Exception as e:
        logger.error(f"‚ùå Error al ejecutar prueba SSL: {e}")
        return False

def main():
    """Funci√≥n principal"""
    logger.info("üöÄ Iniciando pruebas de correcci√≥n SSL para eliminaci√≥n...")
    
    # Verificar archivo de credenciales
    credentials_file = "credentials.json"
    if not os.path.exists(credentials_file):
        logger.error(f"‚ùå Archivo de credenciales no encontrado: {credentials_file}")
        logger.info("üí° Aseg√∫rate de tener el archivo credentials.json en el directorio backend")
        return False
    
    logger.info("‚úÖ Archivo de credenciales encontrado")
    
    # Ejecutar prueba
    success = test_ssl_delete_fix()
    
    if success:
        logger.info("üéâ Las correcciones SSL para eliminaci√≥n est√°n funcionando correctamente")
        logger.info("‚úÖ La eliminaci√≥n masiva de libros deber√≠a funcionar sin errores SSL")
        return True
    else:
        logger.error("‚ùå Las correcciones SSL para eliminaci√≥n no est√°n funcionando")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
